use crate::Target;

pub fn generate_skeleton(
    chip_name: &str,
    target: &Target,
    features: Vec<String>,
    version: &str
) -> String {
    let mut skeleton = String::new();

    skeleton += &generate_header(chip_name, version);
    skeleton += &generate_dependencies(target);
    skeleton += &generate_profiles();
    skeleton += &generate_features(features);

    skeleton
}

fn generate_header(chip: &str, version: &str) -> String {
    format!("# Automatically generated by svd2rust {version}
[package]
name = \"{chip}-pac\"
keywords = [\"no-std\", \"embedded-hal\"]
version = \"0.1.0\"
authors = []
# edition = \"2018\"
",
        chip=chip,
        version=version
    )
}

fn generate_dependencies(target: &Target) -> String {
    let mut deps = String::new();
    deps += "\n";
    deps += "[dependencies]\n";
    deps += "vcell = \"0.1.0\"\n";
    deps += "\n";

    match target {
        Target::CortexM => {
            deps += "bare-metal = \"0.2.0\"\n";
            deps += "cortex-m = \"0.5.0\"\n";
            deps += "
[dependencies.cortex-m-rt]
optional = true
version = \"0.5.0\"
";
        }
        Target::Msp430 => {
            deps += "bare-metal = \"0.1.0\"\n";
            deps += "msp430 = \"0.1.0\"\n";
        }
        Target::RISCV => {
            deps += "bare-metal = \"0.1.0\"\n";
            deps += "riscv = \"0.2.0\"\n";
            deps += "riscv-rt = \"0.2.0\"\n";
        }
        Target::None => {
            // No dependencies
        }
    }

    deps
}

fn generate_profiles() -> String {
    format!(
"
[profile.dev]
incremental = false
",
    )
}

fn generate_features(features: Vec<String>) -> String {
    format!(
        "
[features]

# Auto generated feature flags
# By default, NO peripherals are enabled for use. To activate peripherals, select
# each peripheral (as a feature flag) necessary for your use, or select the `all`
# feature to activate all peripherals (selecting all will increase compile time)
all = [ {} ]
default = []
rt = [\"cortex-m-rt/device\"]

# Individual Peripherals
{}
",
        features.iter().map(|feat| format!("'{}'", feat)).collect::<Vec<_>>().join(", "),
        features.iter().fold(String::new(), |mut s, f| {
            s.push_str(&format!("{} = []\n", f));
            s
        })
    )
}
